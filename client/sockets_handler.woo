--- ======== sockets4 sockets5 处理程序|sockets(4/5) handler ========

require(_ARGS[2] .. '.client.utils'); -- 导入工具包
local conf = _ARGS[3];

print('sockets(4/5) handler in');
--_out('_ARGS:=== ', _ARGS);


-- 获取线程传入的 sockets handler
local handler = _ARGS[1]
assert(handler, 'server form parent not correct.')

print('conn ok!')
local len, b = handler:read(1) -- { 0x05 }
if len < 1 then
    print("Request packet is too short!")
    return
end

--    print('Got first byte for proxy:', b[1])

if b[1] == 0x05 then
    -- sockets5协议
    print('sockets-5 in')
    -- 开始读取sockets 5 剩余报文
    local sockets_header_read_left_len, _, err = handler:read(1024)
    if sockets_header_read_left_len < 1 or err then
        print('read sockets5 left header error:', err)
        return
    end

    -- 回应客户端：Socks服务端不需要验证方式
    _, _ = handler:write({ 0x05, 0x00 })

    -- 读取客户端报文中的规则
    local sockets_header_read_len, sockets_header_bytes, err1 = handler:read() -- 挂起了
    if sockets_header_read_len < 1 or err1 then
        print('read sockets5 new header error:', err)
        return
    end

    local host, port
    (({ [0x01] = function()
        -- ip v4
        host = sockets_header_bytes[5] .. '.' .. sockets_header_bytes[6] .. '.' ..
                sockets_header_bytes[7] .. '.' .. sockets_header_bytes[8]
        print("got ip v4:", host)
    end, [0x03] = function()
        -- domain
        host = _strs(_tbl_sub(sockets_header_bytes, 6, sockets_header_read_len - 1)) -- // [5] 表示域名的长度
        print("got domain:", host)
    end, [0x04] = function()
        -- ip v6
        host = _strs(_tbl_sub(sockets_header_bytes, 5, 20))
        print("got ip v6:", host)
    end })[sockets_header_bytes[4]])()
    -- got port
    port = math.bor(math.lshift(sockets_header_bytes[sockets_header_read_len - 1], 8),
            sockets_header_bytes[sockets_header_read_len])
    print('parse host port done:', host, port)

    --        print('======_include======', _include)

    local tsf = _include('client.transfer'):new({
        tokenB = "123",
        timeB = _time(),
        portB = port,
        remoteAddr = conf.remote_addr,
        hostB = host,
        remoteConnectOk = function()
            --// reply success to client
            print('reply success to client')
            _, _ = handler:write({ 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 })
        end,
        beforeEachCopy = nil })

    -- https://www.google.com

    tsf:isValid(handler, function()
        print('sockets5 isValid ok!')
        tsf:eachCopy()

    end, function(err11)
        print('sockets5 isValid err:', err11)
        --os.exit(-1)
    end)

elseif b[1] == 0x04 then
    -- sockets4协议
    print('sockets-4 in')
    len, b = handler:read(1)

    --var b [1]byte
    if len ~= 1 then
        return print("Socks4Request input too short")
    end

    local s = {}
    s.command = b[1]
    if b[1] ~= 1 then
        if b[1] == 2 then
            -- todo 未实现绑定命令
            return print("Unimplemented bind command")
        end
        return print("Invalid command:" .. s.command)
    end

    len, b = handler:read(2)

    s.port = _strs(b)
    s.port_b = (b)

    local ll, bb = handler:read(4)
    if ll ~= 4 then
        return print("Socks4Request address is too short")
    end

    s.address = _strs(bb)
    s.address_b = (bb)

    local n, b1 = handler:read(1)
    if n ~= 1 then
        return print("Socks4Request input too short")
    end
    if b1[1] ~= 0 then
        return print("Sock4 protocol errored")
    end

    -- ok
    --        print('======_include======', _include)

    local tsf = _include('client.transfer'):new({
        tokenB = "123321123", timeB = _time(), portB = s.port, remoteAddr = conf.remote_addr,
        hostB = s.address, remoteConnectOk = function()
            local b = {}
            b = _merge(b, 0, 0x5A)
            b = _merge(b, s.port_b, s.address_b)
            -- b = append(b, byte((s.Port&0xFF00)>>8), byte(s.Port&0xFF))
            print('reply success to client')
            handler:write(b)
        end, beforeEachCopy = nil })

    tsf:isValid(handler, function()
        print('sockets5 isValid ok!')
        tsf:eachCopy()

    end, function(err11)
        print('sockets5 isValid err:', err11)
    end)

else
    -- if b[1] == _ascii('C')
    -- handler for http/s
    print('===========handler for http/s============')

    _ARGS[4] = b
    _include('client.http(s)_single')
end

--handler:close()
--print('sockets server read,len:', n, 'str:', _strs(b))
--f:write(' hello client!')

