--- transfer for sign
local transfer = {
    timeB = '',
    hostB = '',
    portB = '',
    portB = '',
    tokenB = '',

    --- client for sockets
    client = nil,
    server = nil,
    remoteConnectOk = nil,
    beforeEachCopy = nil,
    remoteAddr = nil,
}
function transfer:new(opt)
    local filter = {
        'timeB',
        'hostB',
        'portB',
        'portB',
        'tokenB',
        'remoteAddr',
        'remoteConnectOk',
        'beforeEachCopy',
    }
    for _, v in ipairs(filter) do
        if opt[v] then
            self[v] = opt[v]
        end
    end
    return self
end

function transfer:eachCopy()
    -- print(self.client, self.server)
    self.server:copy(self.client, true)
    print('sockets done',self.hostB)
end

--- host cache
---
--- flag==1:use local, when got data fail,use remote server to access again
---
--- flag==2:only use local
---
--- flag==3:only use remote
local host_cache = {
    flag = {
        USE_LOCAL = 1,
        USE_LOCAL_ONLY = 2,
        USE_REMOTE = 3,
        USE_REMOTE_CACHE = -3,
    },
    hosts = { ['github.com'] = 3 }
}

local _CONST = {
    --- 1: use local first ,fail use remote; 0: use remote all
    RUN_MODE = 1
}

--- use local machine to access server first
function transfer:useLocal(ok_callback, fail_callback)
    local ok = nil
    print("use local access before:", self.hostB .. ':' .. self.portB)
    local server = woo.sockets:new()
    local cok, err = server:dial("tcp", self.hostB .. ":" .. self.portB, function()
        if err ~= nil then
            print("local connect timeout:", err)
            ok = err
            return
        end
        print("use local access ok:", self.hostB .. ':' .. self.portB)
        self.server = server
        if self.remoteConnectOk ~= nil then
            self.remoteConnectOk(self)
        end
        if self.beforeEachCopy ~= nil then
            self.beforeEachCopy(self)
        end

        ok_callback()
    end, { timeout = 2000 })

    if not cok then
        return err
    end

    return ok
end

function transfer:isValid(client, ok_callback, fail_callback)
    self.client = client

    --  // 先走本地，本地不能访问在走远程
    local v = host_cache.hosts[self.hostB]
    if (not v and _CONST.RUN_MODE == 1) or v == host_cache.flag.USE_LOCAL or v == host_cache.flag.USE_LOCAL_ONLY then
        local e1 = self:useLocal(ok_callback, fail_callback)
        if nil == e1 then
            return
        end

        print("use local machine to access fail.", e1)
        if v == host_cache.flag.USE_LOCAL_ONLY then
            -- only use local machine ,if useLocal() fail,just end progress.
            return
        end
        print("use remote machine to access again.")
    else
        print('use remote match:', v)
    end

    local server = woo.sockets:new()
    local ok = server:dial('tcp', self.remoteAddr, function()
        self.server = server
        -- when use local fail,set it to USE_REMOTE_CACHE
        if host_cache.hosts[self.hostB] == host_cache.flag.USE_LOCAL then
            host_cache.hosts[self.hostB] = host_cache.flag.USE_REMOTE_CACHE
        end

        -- connect remote server ok, tell client
        if self.remoteConnectOk ~= nil then
            self.remoteConnectOk(self)
        end

        local tkb = _str_byte(self.tokenB)
        local tib = _str_byte(self.timeB)
        local prb = _str_byte(self.portB)
        local hsb = _str_byte(self.hostB)

        local bts = _merge((#(tkb)),
            (#(tib)),
            (#(prb)),
            (#(hsb)),
            tkb, tib, prb, hsb)
        local ee = server:write(bts)

        --_out(bts, ee)

        nn, bb, err_ = server:read(512)
        if err_ ~= nil then
            print(err_, nn)
            fail_callback(err_)
        end

        if bb[1] ~= 0x00 then
            print("auth fail,server", bb[1])
            fail_callback("can't get remote addr")
        end

        if self.beforeEachCopy ~= nil then
            self.beforeEachCopy(self)
        end

        -- ok_callback success
        ok_callback()
    end)
    print('remote connect status:', ok)
end

return transfer